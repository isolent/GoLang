sync.WaitGroup{}

 - это создание нового объекта типа sync.WaitGroup. WaitGroup - это синхронизирующий объект в Go, 
который позволяет программе ожидать завершения выполнения нескольких заданий.
Когда программа вызывает метод wg.Add(n), n добавляется к внутреннему счетчику WaitGroup.
Затем, каждый раз, когда задание завершается, вызывается метод wg.Done(), 
который уменьшает счетчик на 1 .
В конце программы, вызывается метод wg.Wait(), который блокирует главную программу 
до тех пор, пока счетчик не станет равным нулю. Когда это произойдет, главная программа 
продолжает свою работу. Таким образом, создание нового объекта типа sync.WaitGroup означает создание нового 
синхронизирующего объекта, который будет использоваться для ожидания завершения выполнения задания.


incrementCounter() 

- это функция, которая инкрементирует глобальную переменную counter 
на 1 в потокобезопасном режиме. Когда функция вызывается, она получает эксклюзивный 
доступ к counterMutex с помощью counterMutex.Lock(). Это гарантирует, что никакой 
другой поток не сможет получить доступ к counter в то же время. Затем функция инкрементирует 
counter на 1 и освобождает counterMutex с помощью counterMutex.Unlock(), позволяя другим 
потокам получить доступ к counter, если они ждут на мьютексе. Таким образом, функция 
incrementCounter() обеспечивает потокобезопасную инкрементацию глобальной переменной counter.


UnsplashPhoto 

- это пользовательский тип данных в языке программирования Go, 
который представляет объект фотографии с сайта Unsplash. Он содержит вложенный 
тип данных URLs, который в свою очередь содержит строку Regular. 
а структура содержит только одно поле: URLs, которое само по себе является 
структурой, содержащей только одно поле Regular.
Поле Regular определено как строка и использует тег json:"regular". 
Это означает, что когда объект типа UnsplashPhoto сериализуется в формат JSON, 
значение поля Regular будет использоваться в качестве значения свойства "regular" в JSON-объекте

